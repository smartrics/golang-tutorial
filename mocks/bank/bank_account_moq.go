// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package bank_mocks

import (
	"github.com/smartrics/golang-tutorial/internal/bank"
	"sync"
)

// Ensure, that BankAccountMock does implement bank.BankAccount.
// If this is not the case, regenerate this file with moq.
var _ bank.BankAccount = &BankAccountMock{}

// BankAccountMock is a mock implementation of bank.BankAccount.
//
//	func TestSomethingThatUsesBankAccount(t *testing.T) {
//
//		// make and configure a mocked bank.BankAccount
//		mockedBankAccount := &BankAccountMock{
//			BalanceFunc: func() float64 {
//				panic("mock out the Balance method")
//			},
//			DepositFunc: func(amount float64) (bank.BankAccount, error) {
//				panic("mock out the Deposit method")
//			},
//			IDFunc: func() bank.AccountID {
//				panic("mock out the ID method")
//			},
//			StringFunc: func() string {
//				panic("mock out the String method")
//			},
//			WithdrawFunc: func(amount float64) (bank.BankAccount, error) {
//				panic("mock out the Withdraw method")
//			},
//		}
//
//		// use mockedBankAccount in code that requires bank.BankAccount
//		// and then make assertions.
//
//	}
type BankAccountMock struct {
	// BalanceFunc mocks the Balance method.
	BalanceFunc func() float64

	// DepositFunc mocks the Deposit method.
	DepositFunc func(amount float64) (bank.BankAccount, error)

	// IDFunc mocks the ID method.
	IDFunc func() bank.AccountID

	// StringFunc mocks the String method.
	StringFunc func() string

	// WithdrawFunc mocks the Withdraw method.
	WithdrawFunc func(amount float64) (bank.BankAccount, error)

	// calls tracks calls to the methods.
	calls struct {
		// Balance holds details about calls to the Balance method.
		Balance []struct {
		}
		// Deposit holds details about calls to the Deposit method.
		Deposit []struct {
			// Amount is the amount argument value.
			Amount float64
		}
		// ID holds details about calls to the ID method.
		ID []struct {
		}
		// String holds details about calls to the String method.
		String []struct {
		}
		// Withdraw holds details about calls to the Withdraw method.
		Withdraw []struct {
			// Amount is the amount argument value.
			Amount float64
		}
	}
	lockBalance  sync.RWMutex
	lockDeposit  sync.RWMutex
	lockID       sync.RWMutex
	lockString   sync.RWMutex
	lockWithdraw sync.RWMutex
}

// Balance calls BalanceFunc.
func (mock *BankAccountMock) Balance() float64 {
	if mock.BalanceFunc == nil {
		panic("BankAccountMock.BalanceFunc: method is nil but BankAccount.Balance was just called")
	}
	callInfo := struct {
	}{}
	mock.lockBalance.Lock()
	mock.calls.Balance = append(mock.calls.Balance, callInfo)
	mock.lockBalance.Unlock()
	return mock.BalanceFunc()
}

// BalanceCalls gets all the calls that were made to Balance.
// Check the length with:
//
//	len(mockedBankAccount.BalanceCalls())
func (mock *BankAccountMock) BalanceCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockBalance.RLock()
	calls = mock.calls.Balance
	mock.lockBalance.RUnlock()
	return calls
}

// Deposit calls DepositFunc.
func (mock *BankAccountMock) Deposit(amount float64) (bank.BankAccount, error) {
	if mock.DepositFunc == nil {
		panic("BankAccountMock.DepositFunc: method is nil but BankAccount.Deposit was just called")
	}
	callInfo := struct {
		Amount float64
	}{
		Amount: amount,
	}
	mock.lockDeposit.Lock()
	mock.calls.Deposit = append(mock.calls.Deposit, callInfo)
	mock.lockDeposit.Unlock()
	return mock.DepositFunc(amount)
}

// DepositCalls gets all the calls that were made to Deposit.
// Check the length with:
//
//	len(mockedBankAccount.DepositCalls())
func (mock *BankAccountMock) DepositCalls() []struct {
	Amount float64
} {
	var calls []struct {
		Amount float64
	}
	mock.lockDeposit.RLock()
	calls = mock.calls.Deposit
	mock.lockDeposit.RUnlock()
	return calls
}

// ID calls IDFunc.
func (mock *BankAccountMock) ID() bank.AccountID {
	if mock.IDFunc == nil {
		panic("BankAccountMock.IDFunc: method is nil but BankAccount.ID was just called")
	}
	callInfo := struct {
	}{}
	mock.lockID.Lock()
	mock.calls.ID = append(mock.calls.ID, callInfo)
	mock.lockID.Unlock()
	return mock.IDFunc()
}

// IDCalls gets all the calls that were made to ID.
// Check the length with:
//
//	len(mockedBankAccount.IDCalls())
func (mock *BankAccountMock) IDCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockID.RLock()
	calls = mock.calls.ID
	mock.lockID.RUnlock()
	return calls
}

// String calls StringFunc.
func (mock *BankAccountMock) String() string {
	if mock.StringFunc == nil {
		panic("BankAccountMock.StringFunc: method is nil but BankAccount.String was just called")
	}
	callInfo := struct {
	}{}
	mock.lockString.Lock()
	mock.calls.String = append(mock.calls.String, callInfo)
	mock.lockString.Unlock()
	return mock.StringFunc()
}

// StringCalls gets all the calls that were made to String.
// Check the length with:
//
//	len(mockedBankAccount.StringCalls())
func (mock *BankAccountMock) StringCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockString.RLock()
	calls = mock.calls.String
	mock.lockString.RUnlock()
	return calls
}

// Withdraw calls WithdrawFunc.
func (mock *BankAccountMock) Withdraw(amount float64) (bank.BankAccount, error) {
	if mock.WithdrawFunc == nil {
		panic("BankAccountMock.WithdrawFunc: method is nil but BankAccount.Withdraw was just called")
	}
	callInfo := struct {
		Amount float64
	}{
		Amount: amount,
	}
	mock.lockWithdraw.Lock()
	mock.calls.Withdraw = append(mock.calls.Withdraw, callInfo)
	mock.lockWithdraw.Unlock()
	return mock.WithdrawFunc(amount)
}

// WithdrawCalls gets all the calls that were made to Withdraw.
// Check the length with:
//
//	len(mockedBankAccount.WithdrawCalls())
func (mock *BankAccountMock) WithdrawCalls() []struct {
	Amount float64
} {
	var calls []struct {
		Amount float64
	}
	mock.lockWithdraw.RLock()
	calls = mock.calls.Withdraw
	mock.lockWithdraw.RUnlock()
	return calls
}
